/*
 * -------------------------------------------------
 *  nf-core/predictorthologs Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  // TODO nf-core: Specify your pipeline's command line flags
  genome = false
  reads = false
  readPaths = false
  csv = false
  single_end = false
  protein_fasta_paths = false
  outdir = './results'

  bam = false
  bed = false
  bai = false

  skip_trimming = false
  skip_fastqc = false

  csv = false
  csv_has_is_aligned = false
  csv_has_reads = false
  protein_fastas = false
  input_is_protein = false

  // Differential hash expression options
  diff_hash_expression = false
  diff_hash_with_abundance = false  // Small numbers for fewer features
  diff_hash_inverse_regularization_strength = 0.1  // Small numbers for fewer features
  diff_hash_solver = 'saga'  // Saga solver is fast for large datasets
  diff_hash_penalty = 'l1'   // Use strong penalty for large datasets

  translate_peptide_molecule = "protein"
  // UNIPROT human proteome is default reference. Human has Taxon ID 9606
  proteome_translate_fasta = "ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/reference_proteomes/Eukaryota/UP000005640_9606.fasta.gz"
  translate_tablesize = '1e8'
  translate_jaccard_threshold = 0.05
  translate_peptide_ksize = 8
  // Saving the translate results for each dataset makes it take extra long
  // Recommended for debugging purposes only
  save_translate_csv = false
  save_translate_json = false


  // --- Protein search parameters ---
  proteome_search_fasta = false
  // Either 'diamond' or 'sourmash'
  protein_searcher = 'diamond'
  // valid terms from ftp://ftp.ncbi.nlm.nih.gov/refseq/release/
  // e.g. "complete", "archea", "plasmid", "protozoa", "viral", "vertebrate_mammalian"
  refseq_release = false

  // Sourmash options
  sourmash_index = false  // pre-built sequence bloom tree index
  hashes = false
  sourmash_ksize = false
  sourmash_molecule = false
  sourmash_log2_sketch_size = false

  // Use all of manually curated, verified UniProt/SwissProt as the reference proteome for searching for orthologs
  diamond_database = false
  // valid terms from ftp://ftp.ncbi.nlm.nih.gov/refseq/release/
  // e.g. "complete", "archaea", "plasmid", "protozoa", "viral"
  refseq_release = 'vertebrate_mammalian'
  taxonmap_gz = "ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/accession2taxid/prot.accession2taxid.gz"
  taxdmp_zip = "ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdmp.zip"

  // --- Noncoding RNA search parameters -- //
  search_noncoding = false
  infernal_db = "ftp://ftp.ebi.ac.uk/pub/databases/Rfam/CURRENT/Rfam.cm.gz"
  rfam2go = "ftp://ftp.ebi.ac.uk/pub/databases/Rfam/CURRENT/rfam2go/rfam2go"
  rfam_clan_info = "ftp://ftp.ebi.ac.uk/pub/databases/Rfam/CURRENT/Rfam.clanin"

  // --- Featurecounts orthology options ---
  // Not sure about this name
  do_featurecounts_orthology = false

  save_reference = false

  // Boilerplate options
  name = false
  multiqc_config = false
  email = false
  email_on_fail = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  publish_dir_mode = 'copy'
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  tracedir = "${params.outdir}/pipeline_info"
  igenomes_ignore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'czbiohub/predictorthologs:dev'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Avoid this error:
// WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
// Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351, once this is established and works well, nextflow might implement this behavior as new default.
docker.runOptions = '-u \$(id -u):\$(id -g)'

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'

    // Allow auto expansion of temp directory space
    docker.tmp = "auto"
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  test_csv { includeConfig 'conf/test_csv.config' }
  test_bam { includeConfig 'conf/test_bam.config' }
  test_fastq { includeConfig 'conf/test_fastq.config' }
  test_fastq_paired { includeConfig 'conf/test_fastq_paired.config' }
  test_diff_hash { includeConfig 'conf/test_diff_hash.config' }
  test_diff_hash_abundance { includeConfig 'conf/test_diff_hash_abundance.config' }
  test_diff_hash_sourmash { includeConfig 'conf/test_diff_hash_sourmash.config' }
  test_diff_hash_is_aligned { includeConfig 'conf/test_diff_hash_is_aligned.config' }
  test_download_refseq { includeConfig 'conf/test_download_refseq.config' }
  test_hash2kmer { includeConfig 'conf/test_hash2kmer.config' }
  test_input_is_protein { includeConfig 'conf/test_input_is_protein.config' }
  test_make_diamond_db { includeConfig 'conf/test_make_diamond_db.config' }
  test_noncoding { includeConfig 'conf/test_noncoding.config' }
  test_skip_qc { includeConfig 'conf/test_skip_qc.config' }
  test_sourmash_search { includeConfig 'conf/test_sourmash_search.config' }
  test_sambamba { includeConfig 'conf/test_sambamba.config' }
  test_sencha { includeConfig 'conf/test_sencha.config'}
  test_sencha_sambamba { includeConfig 'conf/test_sencha_sambamba.config'}
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/predictorthologs'
  author = 'Olga Botvinnik'
  homePage = 'https://github.com/nf-core/predictorthologs'
  description = 'Predict orthologous gene mapping from bam + bed or fasta/fastq data'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
